#ConvertToAtomicInteger
ConvertToAtomicInteger_check_preconditions=Convert to AtomicInteger checking preconditions
ConvertToAtomicInteger_task_name=ConvertToAtomicInteger searching for cunits
ConvertToAtomicInteger_analyze_error=Convert to AtomicInteger cannot analyze selected field
ConvertToAtomicInteger_name_user=Convert int to AtomicInteger
ConvertToAtomicInteger_create_changes=ConvertToAtomicInteger create changes
ConvertToAtomicInteger_name_official=Convert to AtomicInteger
ConvertToAtomicInteger_compile_error=ConvertToAtomicInteger: Compiler errors

#ConvertToAtomicLong
ConvertToAtomicLong_check_preconditions=Convert to AtomicLong checking preconditions
ConvertToAtomicLong_task_name=ConvertToAtomicLong searching for cunits
ConvertToAtomicLong_analyze_error=Convert to AtomicLong cannot analyze selected field
ConvertToAtomicLong_name_user=Convert long to AtomicLong
ConvertToAtomicLong_create_changes=ConvertToAtomicLong create changes
ConvertToAtomicLong_name_official=Convert to AtomicLong
ConvertToAtomicLong_compile_error=ConvertToAtomicLong: Compiler errors

#ConvertToConcurrentHashMapRefactoring
ConvertToConcurrentHashMapRefactoring_check_preconditions=Convert to ConcurrentHashMap: checking preconditions
ConvertToConcurrentHashMapRefactoring_task_name=ConvertToConcurrentHashMap: searching for cunits
ConvertToConcurrentHashMapRefactoring_program_name=Field_analyzing
ConvertToConcurrentHashMapRefactoring_type_error=Unexpected type for 
ConvertToConcurrentHashMapRefactoring_analyze_error=Convert to ConcurrentHashMap: cannot analyze selected field
ConvertToConcurrentHashMapRefactoring_name_user=Convert HashMap to ConcurrentHashMap
ConvertToConcurrentHashMapRefactoring_create_changes=ConvertToConcurrentHashMap: create changes
ConvertToConcurrentHashMapRefactoring_name_official=Convert to ConcurrentHashMap
ConvertToConcurrentHashMapRefactoring_compile_error=ConvertToConcurrentHashMap: compiler errors

#ConvertToFJTaskRefactoring
ConvertToFJTaskRefactoring_check_preconditions=Convert to FJTask checking preconditions
ConvertToFJTaskRefactoring_task_name=ConvertToFJTask analyze preconditions
ConvertToFJTaskRefactoring_recursive_method=Reimplement recursive method to invoke the FJTask framework
ConvertToFJTaskRefactoring_recursive_action=Create RecursiveAction Subtype
ConvertToFJTaskRefactoring_generate_compute=generate compute() method
ConvertToFJTaskRefactoring_recursion_error_1=Cannot identify the base case for recursion. Maybe 
ConvertToFJTaskRefactoring_recursion_error_2= is not a recursive divide-and-conquer
ConvertToFJTaskRefactoring_scenario_error=Scenario not handled yet: recursive method call is within
ConvertToFJTaskRefactoring_analyze_error=Convert to FJTask cannot analyze selected method
ConvertToFJTaskRefactoring_compile_error=Convert to FJTask compile errors
ConvertToFJTaskRefactoring_compile_error_update=ConvertToFJTask compiler errors update
ConvertToFJTaskRefactoring_name_user=Convert Recursive Method to FJTask
ConvertToFJTaskRefactoring_create_changes=ConvertToFJTask create changes
ConvertToFJTaskRefactoring_name_official=Convert to FJTask
ConvertToFJTaskRefactoring_sequential_req=Sequential Threshold is Mandatory

#AccessAnalyzerForAtomicInteger
AccessAnalyzerForAtomicInteger_access_error_1=Synchronized block contains references to another field \"
AccessAnalyzerForAtomicInteger_access_error_2=\". AtomicInteger cannot preserve invariants over two field accesses, consider using locks instead.

#AccessAnalyzerForConcurrentHashMap
AccessAnalyzerForConcurrentHashMap_method_invocation=Method Invocation
AccessAnalyzerForConcurrentHashMap_init=Initialization
AccessAnalyzerForConcurrentHashMap_replace_with_absent=Replace with putIfAbsent()
AccessAnalyzerForConcurrentHashMap_remove_statement=Remove Statement
AccessAnalyzerForConcurrentHashMap_then_clause_error=Error occurred while handling then-clause with multiple statements: 
AccessAnalyzerForConcurrentHashMap_method_error=Cannot find method invocation.
AccessAnalyzerForConcurrentHashMap_code_error="Unexpected code path"
AccessAnalyzerForConcurrentHashMap_clone_error=Cannot refactor a method invocation for clone(): ConcurrentHashMap has no such method.
AccessAnalyzerForConcurrentHashMap_synch_block_error=Error occurred while checking for synchronized block: 
AccessAnalyzerForConcurrentHashMap_synch_method_error=Error occurred while checking for synchronized method: 

#ConcurrencyRefactorings
ConcurrencyRefactorings_update_imports=Update Imports
ConcurrencyRefactorings_type_error=type not resolveable
ConcurrencyRefactorings_field_compile_error=Compiler errors with the field to be refactored
ConcurrencyRefactorings_program_name=Analyzing the field
ConcurrencyRefactorings_empty_string=
ConcurrencyRefactorings_read_access=Read Access
ConcurrencyRefactorings_write_access=Write Access
ConcurrencyRefactorings_postfix_access=Postfix Access
ConcurrencyRefactorings_prefix_access=Prefix Access
ConcurrencyRefactorings_remove_synch_mod=Remove Synchronized Modifier
ConcurrencyRefactorings_remove_synch_block=Remove Synchronized Block
ConcurrencyRefactorings_unsafe_op_error_1=Cannot execute 
ConcurrencyRefactorings_unsafe_op_error_2=atomically. This would be required in converting 
ConcurrencyRefactorings_unsafe_op_error_3=. Consider using locks instead.